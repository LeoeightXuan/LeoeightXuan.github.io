<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C#第五周第一节课的代码整理</title>
    <link href="/2025/03/17/C-%E7%AC%AC%E4%BA%94%E5%91%A8%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/"/>
    <url>/2025/03/17/C-%E7%AC%AC%E4%BA%94%E5%91%A8%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>这节课课前首先提问了： $break$ 语句和 $continue$ 语句的区别分别是什么。</p><p>$break$ 语句是跳出整个循环，而且是最近的循环。$continue$ 是结束当前的循环。</p><p>下面的这份代码在解释outer参数时出现。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">outer</span>参数<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">TryFindMinMax</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] numbers, <span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> min, <span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> max</span>)</span><br>        &#123;<br>            min = max = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(numbers == <span class="hljs-literal">null</span> || numbers.Length == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            min = numbers[<span class="hljs-number">0</span>]; <br>            max = numbers[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">int</span> num <span class="hljs-keyword">in</span> numbers)<br>            &#123; <br>                <span class="hljs-keyword">if</span>(num &lt; min) min = num;<br>                <span class="hljs-keyword">if</span> (num &gt; max) max = num;<br>            &#125;<br>            <span class="hljs-comment">// 此处如果对numbers进行修改，那么主函数中的 data 也会发生变化</span><br>            <span class="hljs-comment">// 因为数组是引用类型，传递的是地址</span><br>            <span class="hljs-comment">// 上课点到我回答这个问题，答错了www</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span>[] data = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>&#125;;<br>            <span class="hljs-keyword">if</span> (TryFindMinMax(data, <span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> minVal, <span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> maxVal))<br>            &#123;<br>                Console.WriteLine(<span class="hljs-string">$&quot;最小值：<span class="hljs-subst">&#123;minVal&#125;</span>， 最大值<span class="hljs-subst">&#123;maxVal&#125;</span>&quot;</span>);<br>            &#125;<br><br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>这里是对params参数的调用测试，params参数传递的是可变参数数组，允许方法接收可变数量的参数，这样调用方法时可以传入任意数量的同类型参数，而不需要显式地创建数组。 </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">params</span>参数应用<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Sum</span>(<span class="hljs-params"><span class="hljs-keyword">params</span> <span class="hljs-built_in">int</span>[] numbers</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> total = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">int</span> num <span class="hljs-keyword">in</span> numbers)<br>            &#123;<br>                total += num;<br>            &#125;<br>            <span class="hljs-keyword">return</span> total;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            Console.WriteLine(Sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>            Console.WriteLine(Sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>));<br>            Console.WriteLine(Sum());<br><br>            <span class="hljs-comment">//也可以直接传递数组</span><br>            <span class="hljs-built_in">int</span>[] arr = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span> &#125;;<br>            Console.WriteLine(Sum(arr));<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>下面是课堂上布置的一个练习，用来测试递归函数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> 递归测试<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Fun</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * Fun(n - <span class="hljs-number">1</span>) + Fun(n - <span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> x = <span class="hljs-number">8</span>;<br>            Console.WriteLine(<span class="hljs-string">$&quot;函数得到的值为<span class="hljs-subst">&#123;Fun(x)&#125;</span>&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>老师布置了一个任务，就是写一个适用于四位数水仙花数的程序，放在word中，后面提交到他的电脑上。</p>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#阶段性复习——第一章</title>
    <link href="/2025/03/17/C-%E9%98%B6%E6%AE%B5%E6%80%A7%E5%A4%8D%E4%B9%A0%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2025/03/17/C-%E9%98%B6%E6%AE%B5%E6%80%A7%E5%A4%8D%E4%B9%A0%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>我会将自己复习 C# 的笔记都同步更新到博客上，不过我无法保证这些文章对于最后的考试会有帮助。这里整理的知识点主要有两大来源：课本内容与课堂习题。我自己也会在课上跟着老师绘制树形图，不过绘制树形图的频率没有规律，而且往往绘制出来的内容也会比较乱，这个我就不上传了，我会根据树形图上的重点——也就是老师上课时讲过的重点，去整理这些笔记。未来如果有机会的话，我也会将课堂上我们写过的代码给整理上去。眼下是第五周，前几周的代码我可能上传不了<del>因为之前命名的太乱了</del>，不过前几周的代码也不算重要。未来我大概每节课之后都会更新一次代码。希望能说到做到。</p><p>下面就是对第一章知识点的整理。<del>说实话感觉课后习题与课堂上讲的内容关联性不大</del></p><h2 id="一-类"><a href="#一-类" class="headerlink" title="一. 类"></a>一. 类</h2><h3 id="1-对象抽象与归类"><a href="#1-对象抽象与归类" class="headerlink" title="1. 对象抽象与归类"></a>1. 对象抽象与归类</h3><p>类是从具有<strong>相同行为与属性的对象</strong>中抽象出来的。类是一堆具有共性对象的特性描述，也就是对某种对象的抽象描述。对象具有<strong>类同样的属性成员与方法成员</strong>，用一个类定义的一堆对象中，不同对象具有<strong>不同的</strong>属性值。</p><h3 id="2-类的封装"><a href="#2-类的封装" class="headerlink" title="2. 类的封装"></a>2. 类的封装</h3>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课内复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通关大表哥2第二章后的一些随感</title>
    <link href="/2025/03/15/%E9%80%9A%E5%85%B3%E5%A4%A7%E8%A1%A8%E5%93%A52%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9A%8F%E6%84%9F/"/>
    <url>/2025/03/15/%E9%80%9A%E5%85%B3%E5%A4%A7%E8%A1%A8%E5%93%A52%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9A%8F%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>用了两周时间，大概十六个小时，通关了大表哥2的第二章。随着剧情的深入，我越发喜欢起我们的主角亚瑟和他的兄弟们。这个游戏带给我前所未有的震撼，虽然它的剧情节奏偏缓，角色在游戏里的远行也主要依靠骑行，但这丝毫不影响游戏的体验。一群亡命徒，杀人抢劫拦火车，嘴里却时常念叨追寻自由。在营地中有时会发生争吵，到了晚上，你又常常可以坐在火堆前，听其他兄弟的故事。亡命徒的生活并不都是充满血腥和硝烟，他们当中的许多人也拥有着很正的三观。他们每个人也都有着自己的故事。他们的故事与剧情可能没有太大关联，在未来我也可能无法了解他们所有的过往，但这已经够了。我在游戏时往往忘记了这是一款游戏，我真的愿意在火堆前，听一个npc讲述十几分钟的故事，没有剧情要求，我也可以随时离开，但我就是有些不舍，我很珍惜这些故事。这些故事为这款游戏带来了超乎寻常的深度，也让游戏里的角色拥有更为立体的灵魂。</p><p>亚瑟，我们的主角。在开始游戏时我们对他一无所知，随着剧情慢慢深入，我们开始了解了一些他的过往，了解他与其他人的交集。而我们也渐渐了解了营地里的其他人。而这些过去的故事都是都是亚瑟与伙伴们在前行的途中，聊天提到的，与剧情往往没有太多的直接的关系。我非常的喜欢这一点。</p>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大表哥2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯客观题复习概览</title>
    <link href="/2025/03/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%AE%A2%E8%A7%82%E9%A2%98%E5%A4%8D%E4%B9%A0%E6%A6%82%E8%A7%88/"/>
    <url>/2025/03/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%AE%A2%E8%A7%82%E9%A2%98%E5%A4%8D%E4%B9%A0%E6%A6%82%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<p>再过一个月就要进行蓝桥杯比赛，后面得加强对客观题和程序题的着重复习。这篇博客主要是为了对客观题涉及到的知识点做一个整理，后面会对这些知识点进行着重复习，同时也可能会上传笔记。</p><h3 id="第十二届："><a href="#第十二届：" class="headerlink" title="第十二届："></a><p class="note note-primary">第十二届：</p></h3><ol><li>串口通信     <span style="margin-left: 2em"></span>（通信速度单位）</li><li>放大电路  <span style="margin-left: 2em"></span>   （开环概念， 电压放大倍数与电压增益关系， 多级放大电路通频带变化） </li><li>时序逻辑电路 </li><li>循环结构语法</li><li>c 的关键字</li><li>指针       <span style="margin-left: 2em"></span><span style="margin-left: 2em"></span> （语法）</li><li>通信方式    <span style="margin-left: 2em"></span><span style="margin-left: 0.6em"></span> (I2C地址模式， 哪种板间通信必须共地)</li></ol><h3 id="第十三届："><a href="#第十三届：" class="headerlink" title="第十三届："></a><p class="note note-success">第十三届：</p></h3><ol><li>时钟 <span style="margin-left: 2em"></span> （作为MCO输出的时钟源）</li><li>数电 <span style="margin-left: 2em"></span>（三态门）</li><li>电路 <span style="margin-left: 2em"></span>（电路图与表达式相符的是）</li><li>寄存器 <span style="margin-left: 1em"></span>（实现引脚翻转）</li><li>通信 <span style="margin-left: 2em"></span> （差分方式传输的选项，全双工串行通信性质）</li><li>模电 <span style="margin-left: 2em"></span>（放大电路）</li><li>stm32（内核级外设， DMA可连接的外设）</li></ol><h3 id="第十四届："><a href="#第十四届：" class="headerlink" title="第十四届："></a><p class="note note-info">第十四届：</p></h3><ol><li>数电 <span style="margin-left: 2em"></span>（时序逻辑电路， 二进制计算， 门电路， 同步电路与异步电路的区别， DAC转换）</li><li>模电 <span style="margin-left: 2em"></span>（运算放大器， 晶体管性质）</li><li>stm32<span style="margin-left: 2em"></span>（中断优先级的配置） </li><li>c 的关键字（inline）</li></ol><p>以上是对前几届蓝桥杯嵌入式客观题涉及知识点的整理，可以发现，客观题考察的重点是模电的放大电路和数电的部分内容。同时每年都会出一些与stm32相关的题，得对stm32的各个组成部分都进行整理总结。后面得带着对模电和数电进行大致的学习。一个月的话，时间足够，不过也得抓紧了。加油！</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>适用于Cramer定理的python代码</title>
    <link href="/2025/03/13/%E9%80%82%E7%94%A8%E4%BA%8ECramer%E5%AE%9A%E7%90%86%E7%9A%84python%E4%BB%A3%E7%A0%81/"/>
    <url>/2025/03/13/%E9%80%82%E7%94%A8%E4%BA%8ECramer%E5%AE%9A%E7%90%86%E7%9A%84python%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>最近做线性代数练习，遇到一节练习，要求我们全部用cramer定理去解线性方程。这显然是很离谱的，因为cramer定理虽然正确，但计算量巨大。而练习涉及到的矩阵，大部分都是三阶和四阶矩阵，有一题甚至涉及6阶矩阵，简直丧心病狂。所以我用deepseek生成了一篇代码。这篇代码写的很好，思路清晰，结构规整而且有许多对numpy的调用值得学习，所以我准备把这篇代码整理下来，写篇文章放到博客上。</p><p>下面就是deepseek生成的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_matrix</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;读取n阶方阵和常数项&quot;&quot;&quot;</span><br>    matrix = []<br>    b = []<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请输入<span class="hljs-subst">&#123;n&#125;</span>行，每行包含<span class="hljs-subst">&#123;n + <span class="hljs-number">1</span>&#125;</span>个数值（系数 + 常数项）：&quot;</span>)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            row = <span class="hljs-built_in">input</span>().split()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) == n + <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-comment"># 将输入转换为浮点数</span><br>                    coefficients = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">float</span>, row[:n]))<br>                    constant = <span class="hljs-built_in">float</span>(row[-<span class="hljs-number">1</span>])<br>                    matrix.append(coefficients)<br>                    b.append(constant)<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">except</span> ValueError:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入包含非数字，请重新输入该行：&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;每行需要输入<span class="hljs-subst">&#123;n + <span class="hljs-number">1</span>&#125;</span>个数值，请重新输入该行：&quot;</span>)<br>    <span class="hljs-keyword">return</span> np.array(matrix), np.array(b)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cramer_solve</span>(<span class="hljs-params">A, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;使用Cramer法则解线性方程组&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        D = np.linalg.det(A)<br>    <span class="hljs-keyword">except</span> np.linalg.LinAlgError:<br>        D = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(D) &lt; <span class="hljs-number">1e-9</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>    D_values = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(A.shape[<span class="hljs-number">1</span>]):<br>        Ai = A.copy()<br>        Ai[:, i] = b<br>        D_values.append(np.linalg.det(Ai))<br><br>    solutions = [D_i / D <span class="hljs-keyword">for</span> D_i <span class="hljs-keyword">in</span> D_values]<br>    <span class="hljs-keyword">return</span> D, D_values, solutions<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入方阵的阶数n：&quot;</span>))<br>    A, b = read_matrix(n)<br><br>    D, D_values, solutions = cramer_solve(A, b)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n计算过程：&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;系数矩阵的行列式 D = <span class="hljs-subst">&#123;D:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">for</span> i, D_i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(D_values, <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;替换第<span class="hljs-subst">&#123;i&#125;</span>列后的行列式 D<span class="hljs-subst">&#123;i&#125;</span> = <span class="hljs-subst">&#123;D_i:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> solutions <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n行列式D为0，方程组无唯一解！&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n方程组的解：&quot;</span>)<br>        <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(solutions, <span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;x<span class="hljs-subst">&#123;i&#125;</span> = <span class="hljs-subst">&#123;x:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>首先值得我学习的就是这个结构的设置，定义多个函数，最后再main函数里将他们组合。这样做就很容易看出代码的逻辑，同时也方便在代码发生错误时，对错误进行定位和修正。同时代码中用了多处 try:   except   语句，对代码可能出现的问题进行一定的预测，规避代码出现故障。这一点对python还是蛮重要的，因为python的一些库中的函数，在遇到问题时就会返回错误值，程序就有可能直接在出现问题的地方崩溃。实际上一些会导致函数返回错误值的问题，比如输入错误，本身问题不大。在这个时候运用try–except语句就可以显著提升代码的流畅性。</p><p>其次就是利用numpy库对矩阵的处理。要善用冒号之类的符号，可以显著提高效率，同时在涉及到对数列或者矩阵进行函数操作时，要能想到用 map 进行处理。比如代码对输入进行处理的部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):                     <span class="hljs-comment">#循环n次</span><br>     <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>         row = <span class="hljs-built_in">input</span>().split()         <span class="hljs-comment">#利用split对输入的字符进行拆分，得到分隔开的元素</span><br>         <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) == n + <span class="hljs-number">1</span>:         <span class="hljs-comment">#此处可以防止漏输等情况发生</span><br>             <span class="hljs-keyword">try</span>:<br>                 <span class="hljs-comment"># 将输入转换为浮点数</span><br>                 coefficients = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">float</span>, row[:n]))  <br>                 constant = <span class="hljs-built_in">float</span>(row[-<span class="hljs-number">1</span>])<br>                 matrix.append(coefficients)     <span class="hljs-comment">#在a矩阵中添加系数</span><br>                 b.append(constant)              <span class="hljs-comment">#在b矩阵中添加常量</span><br>                 <span class="hljs-keyword">break</span><br>             <span class="hljs-keyword">except</span> ValueError:<br>                 <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入包含非数字，请重新输入该行：&quot;</span>)<br>         <span class="hljs-keyword">else</span>:<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;每行需要输入<span class="hljs-subst">&#123;n + <span class="hljs-number">1</span>&#125;</span>个数值，请重新输入该行：&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>注意最后函数的返回，用到了 array 函数，这个函数可以创建一个数组，而我们需要返回的也是一整个数组。所以用 array 非常合适。经测试，假如这里不用array，虽然编译时不会报错，但是使用时会出现问题，程序会直接崩溃。我自己写似乎很难会想到这一点。。。</p><p>而后面主要学习的就是对矩阵列变换的处理。这里用了一个 shape 函数，用来获取矩阵的列数。根据 cramer 定理，我们需要把 b 带入到 A 中的每一列去求行列式。在 python 里，只要满足行数相同，我们就可以直接进行赋值。这里为了不干涉原矩阵 A ，所以用到了 copy 语句进行复制，再对复制出的 Ai 进行处理。随后再把得到的结果放进储存结果的数组中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cramer_solve</span>(<span class="hljs-params">A, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;使用Cramer法则解线性方程组&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        D = np.linalg.det(A)<br>    <span class="hljs-keyword">except</span> np.linalg.LinAlgError:<br>        D = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(D) &lt; <span class="hljs-number">1e-9</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>    D_values = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(A.shape[<span class="hljs-number">1</span>]):<br>        Ai = A.copy()<br>        Ai[:, i] = b<br>        D_values.append(np.linalg.det(Ai))<br><br>    solutions = [D_i / D <span class="hljs-keyword">for</span> D_i <span class="hljs-keyword">in</span> D_values]<br>    <span class="hljs-keyword">return</span> D, D_values, solutions<br><br></code></pre></td></tr></table></figure><p>在 main 函数部分有个小技巧，就是enumerate函数的运用。这个函数可以同时列出数据和下标，省事了不少。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入方阵的阶数n：&quot;</span>))<br>    A, b = read_matrix(n)<br><br>    D, D_values, solutions = cramer_solve(A, b)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n计算过程：&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;系数矩阵的行列式 D = <span class="hljs-subst">&#123;D:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">for</span> i, D_i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(D_values, <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;替换第<span class="hljs-subst">&#123;i&#125;</span>列后的行列式 D<span class="hljs-subst">&#123;i&#125;</span> = <span class="hljs-subst">&#123;D_i:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> solutions <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n行列式D为0，方程组无唯一解！&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n方程组的解：&quot;</span>)<br>        <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(solutions, <span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;x<span class="hljs-subst">&#123;i&#125;</span> = <span class="hljs-subst">&#123;x:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>以上就是对这份代码的整理与学习，目前我还没试着自己重写一遍，未来在涉及到其他矩阵问题时可以借鉴一下这份代码<del>当然也可以再问小鲸鱼</del>。希望自己能获得更高层次的提升吧。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/03/13/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/03/13/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章，用来测试图片。如果测试成功，你应该可以看到一只小猫~</p><p><img src="/2025/03/13/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/image1.jpg" alt="超可爱的小猫"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/13/hello-world/"/>
    <url>/2025/03/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
