<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C#第九周第一节课的代码整理</title>
    <link href="/2025/04/14/C-%E7%AC%AC%E4%B9%9D%E5%91%A8%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/"/>
    <url>/2025/04/14/C-%E7%AC%AC%E4%B9%9D%E5%91%A8%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>本周的代码整理来喽~</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> 属性访问器使用<br>&#123;<br><br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span><br>        &#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> id = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name = <span class="hljs-string">&quot;&quot;</span>;<br>            <br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> ID<br>            &#123;<br>                <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> id; &#125;<br>                <span class="hljs-keyword">set</span> &#123; id = <span class="hljs-keyword">value</span>; &#125;<br>            &#125;<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name<br>            &#123;<br>                <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> name; &#125;<br>                <span class="hljs-keyword">set</span> &#123; name = <span class="hljs-keyword">value</span>; &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            MyClass myClass = <span class="hljs-keyword">new</span> MyClass();<br>            myClass.ID = <span class="hljs-string">&quot;1234&quot;</span>;<br>            myClass.Name = <span class="hljs-string">&quot;Big Head Fish&quot;</span>;<br>            Console.WriteLine(myClass.ID + <span class="hljs-string">&quot; &quot;</span> + myClass.Name);<br><br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#第八周第一节课的代码整理</title>
    <link href="/2025/04/07/C-%E7%AC%AC%E5%85%AB%E5%91%A8%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/"/>
    <url>/2025/04/07/C-%E7%AC%AC%E5%85%AB%E5%91%A8%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>等待上课ing</p><p>开始上课。</p><p>课堂开始首先讲的是类的一些性质，包括继承，多态。。。这些后面可以根据 ppt 复习，后天的考试也不会重点考。不过这些讲的内容其实很重要，而且也非常有用。我从这节课开始才渐渐体会到面向对象在现代开发的便利：我们不再需要考虑具体的应用过程，对于一个具体的项目，我们的分工可以更加轻松。而由于接口等特性，我们在调试程序的时候也会方便很多。最近我在学习一个叫有限状态机的算法，我就发现，面向对象的程序语言，实现有限状态机的难度会比面向过程式的容易很多。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"> <span class="hljs-keyword">namespace</span> 构造函数调用实例<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> myField;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> MyProperty<br>        &#123;<br>            <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> myField; &#125;<br>            <span class="hljs-keyword">set</span> &#123; myField = <span class="hljs-keyword">value</span>; &#125;<span class="hljs-comment">// 这里其实可以对 value 做个判断，在实际开发的过程中会非常有用。</span><br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyClass</span>()      <span class="hljs-comment">// 注意这里构造函数的函数名必须是类名。</span></span><br>        &#123;<br>            myField = <span class="hljs-number">10</span>;   <span class="hljs-comment">// 这里就将 myField 初始化为 10。</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            MyClass one = <span class="hljs-keyword">new</span> MyClass();<span class="hljs-comment">// 在运行到这里时，程序会自动跑到构造函数中。这便是构造函数的特性。</span><br>            one.myField = <span class="hljs-number">1</span>;<br>            one.MyProperty = <span class="hljs-number">2</span>;<br>            Console.WriteLine(<span class="hljs-string">$&quot;one.myField: <span class="hljs-subst">&#123;one.myField&#125;</span>&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">$&quot;one.MyProperty: <span class="hljs-subst">&#123;one.MyProperty&#125;</span>&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于线性代数各概念之间关系的简单整理</title>
    <link href="/2025/04/04/%E5%85%B3%E4%BA%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%90%84%E6%A6%82%E5%BF%B5%E4%B9%8B%E9%97%B4%E5%85%B3%E7%B3%BB%E7%9A%84%E7%AE%80%E5%8D%95%E6%95%B4%E7%90%86/"/>
    <url>/2025/04/04/%E5%85%B3%E4%BA%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%90%84%E6%A6%82%E5%BF%B5%E4%B9%8B%E9%97%B4%E5%85%B3%E7%B3%BB%E7%9A%84%E7%AE%80%E5%8D%95%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>最近在复习线性代数的过程中，感觉自己很有必要对目前我们接触到的各类概念进行一次系统的整理。目前我们学到了第四章，刚刚学完特征值相关的知识，矩阵对角化还没有讲。但到目前为止我们接触到的线性代数中的概念，论数量，大概已经超过我们学过的高等数学中的概念了吧。面对如此多的概念和定理，想必这门课程已经劝退了不少的同学。但就我学到目前的经验和感受而言，许多概念和定理，他们在适用的条件上其实是相似，而且有关联的。把他们区分开的往往是具体应用的场景。而这些具体的应用场景，我们其实也可以从一个较低的维度，去对这些场景进行初步的感知和理解。所以这里我要进行一次尝试，试着对于前三章涉及到的概念和定理进行一次系统性的整理，同时在不同的概念和定理之间寻找隐藏的关系。笔者水平不高，在整理的过程中可能会犯一些低级错误，也可能因为水平比较低，可能在许多地方理解的层次不够。如果读者有什么建议，还请麻烦您练习一下我，或者在评论区中指出。我们一起共同进步，谢谢！</p><p>下面我们就开始进行整理。</p><p>整理这些内容，我的思路是这样的：先梳理出我们学习的路线，再根据这些路线，对涉及的概念和知识点进行一个整理，最后再去寻找不同概念和定理之间的联系。所以，我们首先要做的就是梳理学习路线。笔者因为平时空闲时间较少，基本没听过网课，所以整理的依据主要是老师的课件。目前老师的课件进行到了第四章（4.1），那么笔者的整理路线就是从第一章整理到第三章结束。</p><p>下面就是对于学习路线，整理出的树形图：</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课内复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#第七周第二节课的代码整理</title>
    <link href="/2025/04/02/C-%E7%AC%AC%E4%B8%83%E5%91%A8%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/"/>
    <url>/2025/04/02/C-%E7%AC%AC%E4%B8%83%E5%91%A8%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>准备上课。从这节课开始，课程的难度就会加速上升，<del>大家可以期待一下</del>。我会继续在这里为各位分享课堂代码和课后代码的答案。大家一起加油！争取人人 C# 90+ ！</p><p>首先讲的是冒泡排序的思想，这里展示的是升序排序的冒泡排序。实际上冒泡排序的升序降序调整非常简单，只要更改双层循环中，内层循环的判断就可以。改进版的代码相对于基础代码增加了一个 <em>flag</em> 特判。我们在外层循环中初始化 <em>flag</em> 为 <em>true</em> ，如果我们在内层循环中，没有进行调换操作，那么这其实就说明，我们现在的数组已经满足了我们的要求，我们不需要进一步的循环来达到目标效果，所以在内存循环结束后，如果 <em>flag</em> 的值仍为 <em>true</em> ，没有发生变化，那么就说明我们的代码已经满足了要求，这事我们就可以退出循环，避免不必要的循环。</p><p>下面就是相关的代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> 改进后冒泡排序<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span>[] arr = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">32</span>, <span class="hljs-number">2</span>, <span class="hljs-number">13</span>, <span class="hljs-number">0</span> &#125;;<br>            Console.WriteLine(<span class="hljs-string">&quot;排序前数组&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.Length; i++)<br>            &#123; <br>                Console.Write(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            Console.WriteLine();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.Length - <span class="hljs-number">1</span>; i++)<br>            &#123;<br>                <span class="hljs-built_in">bool</span> flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = arr.Length - <span class="hljs-number">1</span>; j &gt; i; j--)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (arr[j] &lt; arr[j - <span class="hljs-number">1</span>])     <span class="hljs-comment">//  如果这里是 &gt; 那么我们最后得到的数组就是降序</span><br>                    &#123;<br>                        flag = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-built_in">int</span> t = arr[j];<br>                        arr[j] = arr[j - <span class="hljs-number">1</span>];<br>                        arr[j - <span class="hljs-number">1</span>] = t;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (flag)<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            Console.WriteLine(<span class="hljs-string">&quot;排序后数组：&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.Length; i++)<br>            &#123;<br>                Console.Write(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br><br>          <span class="hljs-comment">//  Console.WriteLine(&quot;Hello, World!&quot;);</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>后面又讲了双向链表的一个使用。课上只是大致的讲了一下，只听一节课就把这个点记住显然是不现实的。这个知识点在考试时估计也不会出现太多。将这个的目的就是为了给我们留个大致的印象，在我们将来尝试用 C#解决问题时，就可以想起来使用这个结构。</p><p>下面是使用的一个代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">namespace</span> 双向链表实例<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            LinkedList&lt;<span class="hljs-built_in">string</span>&gt; linkedlist = <span class="hljs-keyword">new</span> LinkedList&lt;<span class="hljs-built_in">string</span>&gt;();<br><br>            linkedlist.AddFirst(<span class="hljs-string">&quot;Head&quot;</span>);<br>            linkedlist.AddFirst(<span class="hljs-string">&quot;Big&quot;</span>);<br>            linkedlist.AddLast(<span class="hljs-string">&quot;Fish&quot;</span>);<br><br>            LinkedListNode&lt;<span class="hljs-built_in">string</span>&gt; headNode = linkedlist.First;<br>            LinkedListNode&lt;<span class="hljs-built_in">string</span>&gt; tailNode = linkedlist.Last;<br><br>            linkedlist.AddAfter(headNode, <span class="hljs-string">&quot;big&quot;</span>);<br><br>            <span class="hljs-keyword">while</span> (headNode != <span class="hljs-literal">null</span>)<br>            &#123;<br>               <span class="hljs-comment">// Console.WriteLine(headNode.ToString());</span><br>                Console.WriteLine(headNode.Value);<br>                headNode = headNode.Next;<br>            &#125;<br><br>           <span class="hljs-comment">// Console.WriteLine(&quot;Hello, World!&quot;);</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#第六周第二节课的作业讲解</title>
    <link href="/2025/03/30/C-%E7%AC%AC%E5%85%AD%E5%91%A8%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BD%9C%E4%B8%9A%E8%AE%B2%E8%A7%A3/"/>
    <url>/2025/03/30/C-%E7%AC%AC%E5%85%AD%E5%91%A8%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BD%9C%E4%B8%9A%E8%AE%B2%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>本周有两项作业，一个是要去除数组中的某个元素，另一个是将一个数组逆序排列。从本周开始，一些基础的算法（比如排序，枚举等）应该会渐渐步入我们的课堂。在初步的掌握判断，选择，循环语句后，我们已经初步的拥有了用代码去表达思想的能力。正如语言的学习，先认识常见单词，再学习基础的语法，然后再试着用这些基础的元素去表达自己的想法。计算机语言也是如此。学习语言的初衷是表达，我们当然不能等学会所有的单词和语法再去说话写作。而我们表达好坏，也与单词和语法的难度没有关联。时至今日，我们依然能看到许多关于 “哪种语言最强的” 无意义争论，也依然能看到许多人对于所谓 “最强算法” 或者 “最前沿算法” 的吹捧和令人不知所以的对比。笔者对计算机的了解不算深入，在很多算法前面也只能算个门外汉。但笔者认为，编程不应拘于程序语言本身。程序语言只是我们表达想法解决问题的媒介，而不是关键。许多人编程的入门，在语言选择的徘徊中戛然而止。也有许多人，匆匆的学完基础的语法后，便将这门语言抛于脑后。编程之路十分艰辛，编程之外的人生也往往充满坎坷和荆棘，这一点我能理解。但如果诸位对着编程尚还存有兴趣，尚还有着用它去解决问题，创造价值的想法，我会在这里为大家鼓励和提供力所能及的帮助。这里送给大家一句话：</p><h3 id="“Toutes-les-actions-et-toutes-les-pensees-vraiment-grandes-ont-un-commencement-derisoire-”"><a href="#“Toutes-les-actions-et-toutes-les-pensees-vraiment-grandes-ont-un-commencement-derisoire-”" class="headerlink" title="“Toutes les actions et toutes les pensées vraiment grandes ont un commencement dérisoire.”"></a><center><i>“Toutes les actions et toutes les pensées vraiment grandes ont un commencement dérisoire.”</i></center></h3><p>下面开始对本周作业进行讲解。</p><p>本周的第一个任务，就是要自己写个函数，用它去删去数组中指定位置的元素。如果讲的更详细一些，我们需要做的就是去掉指定位置的那个元素，并把指定位置后的那个元素向前移动一位，而指定位置之前的那些元素无需改变。根据这个思路，我们大概可以绘制出一幅这样的流程图：</p><p><img src="/2025/03/30/C-%E7%AC%AC%E5%85%AD%E5%91%A8%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BD%9C%E4%B8%9A%E8%AE%B2%E8%A7%A3/pic1.jpg" alt="删除数组函数的流程图"></p><p>那么根据这个流程图，我们应该就能得到下文的代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> 删除数组函数<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span>[] <span class="hljs-title">DelArrayElement</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] ArrayBom, <span class="hljs-built_in">int</span> ser</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> length = ArrayBom.Length;<br>            <span class="hljs-built_in">string</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[length - <span class="hljs-number">1</span>]; <span class="hljs-comment">//这里对长度值减一，因为我们从原数组中删除了一个元素</span><br>            <span class="hljs-keyword">if</span> (ser &gt;= length)        <span class="hljs-comment">//这里的判断，可以防止输入数据有误造成的崩溃问题</span><br>                ser = length - <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (i == ser)<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(i &lt; ser)<br>                    ans[i] = ArrayBom[i];<br>                <span class="hljs-keyword">if</span>(i &gt; ser)<br>                    ans[i - <span class="hljs-number">1</span>] = ArrayBom[i]; <br>            &#125;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">string</span>[] s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">8</span>];<br>            s[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Hello&quot;</span>;<br>            s[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Big&quot;</span>;<br>            s[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;Head&quot;</span>;<br>            s[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;Fish&quot;</span>;<br>            s[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;!&quot;</span>;<br>            s = DelArrayElement(s, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; s.Length; i++)<br>            &#123;<br>                Console.WriteLine(s[i]);<br>            &#125;<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面我们再来看第二项作业。</p><p>第二项作业要求我们，用课上讲的选择排序算法，对一个数组进行降序排序。课上讲的是升序排序的写法，其实降序的思路也是一样的。<del>如果你懒得动脑，你可以直接复制粘贴课上的代码，让后把它进行一下顺序转换就能解决问题</del>，当然这样肯定不是最佳的解法。如果课上听懂了升序选择排序的思想，那么降序的代码其实也很好完成。在写升序代码时，我们会在遍历数组的过程中，记录下我们遇到的最小值，再在遍历完之后，将当前值与这个最小值交换，然后再继续遍历。这里用到了双重遍历——也就是写一个循环的嵌套，让循环的过程如同走楼梯一般，第一次循环 n 次，第二次循环 n - 1 次……以此类推。每一次循环之后，我们都会把那次循环后找到的最小值与循环开始时的元素交换，这样带来的影响就是，当我们进行第 k 次循环后，我们得到的最小值，一定要比第 k - 1 次的值要大。而当我们进行完这一整套循环（包括最外层的循环），假设我们的数组名字叫 a ，那么我们任取 a[k], a[k] 一定要大于 a[k - 1]，由此，我们实现了升序选择排列的算法。</p><p>那么降序应该如何实现呢？与升序的思想也很相似，降序排列后的最终结果，应该是我们从数组 a 中任取一个元素 a[k] , a[k] 一定要小于 a[k - 1] , 那么我们对程序所要进行的变换其实就很明显了，升序时，我们需要记录下循环过程中遇到的最小值再进行交换，那么在降序时，我们是不是只需要把寻找的目标改为最大值就可以了？这里读者假如还不理解，可以自己写几个数，按照刚才所讲的思路进行模拟，进行过几轮后，大概就能对这个算法有更深的认识。</p><p>下面就是降序选择排序的算法实现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> 降序选择排序<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123; <span class="hljs-number">122</span>, <span class="hljs-number">45</span>, <span class="hljs-number">23</span>, <span class="hljs-number">89</span>, <span class="hljs-number">67</span>, <span class="hljs-number">45</span>, <span class="hljs-number">-10</span> &#125;;<br>            Console.WriteLine(<span class="hljs-string">&quot;原数组：&quot;</span>);<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">int</span> i <span class="hljs-keyword">in</span> arr)<br>            &#123;<br>                Console.WriteLine(i + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            Console.WriteLine();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.Length - <span class="hljs-number">1</span>; i++)<br>            &#123;<br>                <span class="hljs-built_in">int</span> num_max = i;<span class="hljs-comment">//看，这里我们做了一个修改，我们记录下的是最大值的位置</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = i; j &lt; arr.Length; j++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (arr[j] &gt; arr[num_max])    <span class="hljs-comment">//除去那个变量名的变化，我们改变的应该只有这里判断的符号</span><br>                        num_max = j;<br>                &#125;<br>                <span class="hljs-built_in">int</span> temp = arr[i];    <span class="hljs-comment">//这里需要进行交换</span><br>                arr[i] = arr[num_max];<br>                arr[num_max] = temp;<br>            &#125;<br>            Console.WriteLine(<span class="hljs-string">&quot;排序后数组：&quot;</span>);<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">int</span> i <span class="hljs-keyword">in</span> arr)<br>            &#123;<br>                Console.WriteLine(i + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            Console.WriteLine();<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上就是我对本周作业的一个讲解，鉴于我的表达能力比较拙劣，或许很多地方表达的还不是太清楚。如果各位还有什么问题，欢迎来问我，我一定会努力给出详细的解答。</p>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课后作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#第六周第二节课的代码整理</title>
    <link href="/2025/03/26/C-%E7%AC%AC%E5%85%AD%E5%91%A8%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/"/>
    <url>/2025/03/26/C-%E7%AC%AC%E5%85%AD%E5%91%A8%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> 交叉数组的遍历<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span>[][] arr;<br>            arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">3</span>][];<br>            arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">2</span>] &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>            arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">3</span>] &#123; <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ,<span class="hljs-number">4</span> &#125;;<br>            arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">4</span>] &#123; <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.GetLength(<span class="hljs-number">0</span>); i++)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; arr[i].Length; j++)<br>                &#123;<br>                    Console.Write(arr[i][j]);<br>                    Console.Write(<span class="hljs-string">&#x27; &#x27;</span>);<br>                &#125;<br>                Console.WriteLine();<br>            &#125;<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>本周作业：完成数组删除函数的编写</p><p>刚刚回答了个问题（就是下面这份代码的编写和讲解），拿了一些平时分，感觉还是不错的。不过感觉自己的语言表达能力还是有点不足，未来还得加强。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> 插入函数<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            arrayBom ----&gt; 原数组</span><br><span class="hljs-comment">            ser      ----&gt; 插入的位置</span><br><span class="hljs-comment">            value    ----&gt; 插入的值</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span>[] <span class="hljs-title">AddArrayElement</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] arrayBom, <span class="hljs-built_in">int</span> ser, <span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> length = arrayBom.Length + <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">int</span>[] answer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[length];<br>            <span class="hljs-keyword">if</span> (ser &gt;= length)<br>                ser = length - <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">int</span> num = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (i == ser)   <br>                    answer[i] = <span class="hljs-keyword">value</span>;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    answer[i] = arrayBom[num++];<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> answer;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">8</span>];<br><br>            <span class="hljs-built_in">int</span> id, val;<br>            Console.WriteLine(<span class="hljs-string">&quot;请输入插入的位置&quot;</span>);<br>            id = Convert.ToInt32(Console.ReadLine());<br>            Console.WriteLine(<span class="hljs-string">&quot;请输入插入的值&quot;</span>);<br>            val = Convert.ToInt32(Console.ReadLine());<br>            a[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            a[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>            a[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br>            a[<span class="hljs-number">3</span>] = <span class="hljs-number">4</span>;<br>            a = AddArrayElement(a, id, val);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; a.Length; i++)<br>            &#123; <br>                Console.WriteLine(a[i]);<br>            &#125;<br>            <span class="hljs-comment">//Console.WriteLine(a.GetLength(0));</span><br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>完成作业后我会把程序放到这篇文章最后，如果你看到这篇文章时哦还没有更新，记得提醒我，谢谢<del>咕咕咕</del> </p><p>哦对，还有一个作业，将优化后的选择排序代码改为降序排序，别忘了。</p>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#阶段性复习--第二章</title>
    <link href="/2025/03/26/C-%E9%98%B6%E6%AE%B5%E6%80%A7%E5%A4%8D%E4%B9%A0-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2025/03/26/C-%E9%98%B6%E6%AE%B5%E6%80%A7%E5%A4%8D%E4%B9%A0-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="2-1-数据类型"><a href="#2-1-数据类型" class="headerlink" title="2.1 数据类型"></a>2.1 数据类型</h2><p>C#的数据类型主要分为两种 <font color="red"> <strong>值类型和引用类型</strong> </font></p><p>值类型变量<font color="red"> <strong>本身包含其数据</strong> </font>，而引用类型变量包含的是<font color="red"> <strong>指向包含数据的内存块的引用或称为句柄</strong> </font></p><p><font color="red"> <strong>其本质区别是：值类型直接存储其值，而引用类型存储对值得引用</strong> </font></p><p><strong>值类型数据存储在栈中，而引用类型存储在堆中</strong></p><p><strong>堆和栈得主要区别是：</strong></p><p><strong>栈在编译时就分配好空间，在代码中有栈的明确定义</strong></p><p><strong>堆是在程序运行中动态分配的内存空间，可以根据程序的运行情况，动态分配内存大小，这个内存空间包含的是对另一个内存位置（地址）的引用，即存放实际引用对象值得地方。</strong></p><p>下面对不同数据类型的特性进行一个简单的整理：</p><h3 id="一、值类型"><a href="#一、值类型" class="headerlink" title="一、值类型"></a>一、值类型</h3><h4 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1. 整数类型"></a>1. 整数类型</h4><p>可以存储整数值，分为有符号 <em><strong>(singal)</strong></em> ，无符号 <em><strong>(unsingal)</strong></em> 类型，没啥特殊性质。</p><h4 id="2-实数类型"><a href="#2-实数类型" class="headerlink" title="2.实数类型"></a>2.实数类型</h4><p>根据实数的精度、范围等要求，C#为实数定义了浮点类型 <em><strong>(float、double)</strong></em> 和 <em><strong>decimal</strong></em> 类型。</p><p>若无精度要求，尝试用 <em><strong>float</strong></em> 来声明实数类型变量。</p><p><em><strong>Decimal</strong></em> 类型是一种专门用于财务计算的类型。<font color="red"> 如果要将数值以 decimal 类型来处理，就应该用 M（或 m ）将其强制指定为 decimal 类型。 </font>例如：<code>decimal num = 123.567M</code>；</p><h4 id="3-布尔类型"><a href="#3-布尔类型" class="headerlink" title="3.布尔类型"></a>3.布尔类型</h4><p>布尔类型数据用于逻辑运算，表示真或假的逻辑结果，占<strong>一个字节</strong>。C# 语言预定了两个常量标识符 <em><strong>true</strong></em> 和 <em><strong>false</strong></em> ,分别表示真和假。</p><p>**注意！**在 C# 中，布尔值与整数类型截然不同，布尔型不能与整数类型相互转换，因此，布尔型变量不能用整数来赋值。</p><h4 id="4-字符类型"><a href="#4-字符类型" class="headerlink" title="4.字符类型"></a>4.字符类型</h4><p>有一类特殊字符，用反斜杠 <em><strong>\</strong></em> 引导，称为转义字符，用于表示一些无法直接表示的字符。除此之外，Unicode转义序列可用 \u 后跟四位十六进制字符（必须指定全部四位十六进制值）表示，或 \x 后跟差不多四位十六进制字符表示（可以省略前导零）。</p><p>例如： <code>\006A</code> 是一个有效的转义序列，而 <code>\u06A</code> 和 <code>\u6A</code> 是无效的。而 <code>\x006A</code>、<code>\x06A</code> 和 <code>\x6A</code> 是有效的，并且对应于同一个字符。</p><h4 id="5-枚举类型"><a href="#5-枚举类型" class="headerlink" title="5.枚举类型"></a>5.枚举类型</h4><p>枚举元素的默认基础类型为 <code>int</code> 枚举类型是一种独特的<strong>值类型</strong>。它用于声明一组命名的<strong>符号常量</strong>。</p><p>举个例子。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">enum</span> orientation: <span class="hljs-built_in">byte</span><br>&#123;<br>north,<br>south,<br>east,<br>west<br>&#125;<br><br><span class="hljs-comment">/* 在定义之后，需要声明这个新类型的变量 */</span><br><br>orientation myOri = orientation.north;<br></code></pre></td></tr></table></figure><p>从枚举类型到整型的转换需要<font color="red"> <strong>显式转换</strong> </font>来完成。</p><p>例如 <code>int x = (int) orientation.north;</code></p><p>在有限组数的描述中，使用枚举类型比使用无符号的整数类型更加直观、易读。</p><h4 id="6-结构体类型"><a href="#6-结构体类型" class="headerlink" title="6. 结构体类型"></a>6. 结构体类型</h4><p>在 C# 中，结构体是一种<font color="red"> <strong>用户自定义的值类型数据结构</strong> </font>。结构体可以用于存储一组相关的数据，这些数据可能具有不同的类型，类似于类。但与类不同的是，<strong>结构体是值类型而类是引用类型</strong>。这意味着结构体的实例在<strong>栈</strong>上分配内存，而类的实例则在<strong>堆</strong>上分配内存。</p><p>结构体通常用于**存储轻量级的数据，且不能继承特性。**由于结构体是值类型，对结构体变量的赋值和传递会进行值复制，这可以避免意外的副作用。</p><h3 id="二、引用类型"><a href="#二、引用类型" class="headerlink" title="二、引用类型"></a>二、引用类型</h3><p><strong>引用类型</strong>是 C# 应用程序中的主要对象数据类型。而在应用程序执行的过程中，预定义的对象类型以 <code>new</code> 创建对象实例，并且存储在<strong>堆</strong>中，而引用该实例的变量存储在<strong>栈</strong>中。</p><p>引用类型具有如下特征：<br>①引用类型的引用变量存储在栈中，被赋值前的值是<font color="red"> null </font>。实例必须<font color="red"> <strong>在托管堆中为引用类型实例分配内存</strong> </font>；</p><p>②使用<font color="red"> <strong>new关键字</strong> </font>创建引用类型变量的引用实例（<font color="red"> <strong>在托管堆中为引用类型实例分配内存、实例成员初始化等</strong> </font>）；</p><p>③引用类型与值类型的存储方式</p><p>引用类型：引用类型存储在堆中。类型实例化的时候，会在堆中开辟一部分空间存储类的实例。类对象的引用还是存储在栈中。</p><p>值类型：值类型总是分配在它声明的地方，作为局部变量时，存储在栈上。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Price;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Example</span>()</span> &#123;<br>    <span class="hljs-comment">// 1. 创建引用变量（此时未关联任何对象）</span><br>    Product phone;  <span class="hljs-comment">// phone = null</span><br><br>    <span class="hljs-comment">// 2. 创建对象并让引用变量指向它</span><br>    phone = <span class="hljs-keyword">new</span> Product(); <br>    phone.Name = <span class="hljs-string">&quot;iPhone&quot;</span>;<br>    phone.Price = <span class="hljs-number">9999</span>;<br><br>    <span class="hljs-comment">// 3. 复制引用变量（指向同一个对象）</span><br>    Product anotherPhone = phone;<br>    anotherPhone.Price = <span class="hljs-number">8999</span>;  <span class="hljs-comment">// 修改的是同一个对象！</span><br><br>    <span class="hljs-comment">// 4. 断开引用</span><br>    phone = <span class="hljs-literal">null</span>;  <span class="hljs-comment">// 对象仍在堆中，直到 GC 回收</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li><strong>对象（Object）</strong><ul><li>是 <strong>实际的数据实体</strong>，存储在<strong>堆内存</strong>中</li><li>包含具体的成员数据（字段、属性等）</li><li>比如：<code>new Product()</code> 会在堆中创建一个 <code>Product</code> 对象</li></ul></li><li><strong>引用变量（Reference Variable）</strong><ul><li>是 <strong>指向对象的“遥控器”</strong>，存储在<strong>栈内存</strong>中</li><li>只保存对象在堆中的<strong>内存地址</strong>（类似门牌号）</li><li>比如：<code>Product phone;</code> 中的 <code>phone</code> 变量</li></ul></li></ol><h3 id="关系示意图"><a href="#关系示意图" class="headerlink" title="关系示意图"></a><strong>关系示意图</strong></h3><p>复制</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">┌─────────────┐        ┌───────────────┐<br>│   栈 Stack   │        │    堆 Heap     │<br>├─────────────┤        ├───────────────┤<br>│ phone ▢─────┼───────▶│ Product对象    │<br>│             │        │ - Name = <span class="hljs-string">&quot;iPhone&quot;</span> <br>└─────────────┘        │ - Price = <span class="hljs-number">9999</span>  <br>                       └───────────────┘<br></code></pre></td></tr></table></figure><p>在 C# 里面其实叫托管堆，托管堆不同于堆，它是由 ***CLR（公共语言运行库）***管理，当堆中满了之后，会自动清理堆中的垃圾。所以，作为 <code>.net</code> 开发，我们不需要关心内存释放的问题。</p><h4 id="2-1-字符串类型"><a href="#2-1-字符串类型" class="headerlink" title="2.1 字符串类型"></a>2.1 字符串类型</h4><p>字符串类型是引用类型，不过是特殊的引用类型。<strong>当把一个字符串变量赋给另一个字符串变量时，会发生对内存中同一个字符串的两个引用</strong>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> str1 = <span class="hljs-string">&quot;Big Head Fish&quot;</span>;<br><span class="hljs-built_in">string</span> str2 = str1;<br>str2 = <span class="hljs-string">&quot;Small Head Fish&quot;</span>;<br><br>Console.WriteLine(str1);<br><br><span class="hljs-comment">// 输出的仍然是“中南大学”</span><br></code></pre></td></tr></table></figure><p>常量字符串的值用一对双撇号表示，字符串中也可以包含转义符，由于转义符用 <code>\</code> 开头，因此表示文件路径是，要采用来纳许两个斜杠。例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> FileName = <span class="hljs-string">&quot;C:\\Big\\Head\\Fish.exe&quot;</span><br></code></pre></td></tr></table></figure><p>C# 语言还提供了另外一种替代方式，就是在字符串常量的前面加上 <code>@</code>，在这个字符后的所有字符都会保持原来的含义，而不会解释为转义符。例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> FileName = <span class="hljs-string">@&quot;C:\Big\Head\Fish.exe&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-数组类型"><a href="#2-2-数组类型" class="headerlink" title="2.2 数组类型"></a>2.2 数组类型</h4><p>数组就是<font color="red"> 有序的、同一类型数据的集合 </font>。数组实质上是包含多个变量的数据结构，其中每一个变量叫做数组的<font color="red"> 元素 </font>，全部元素的数据类型相同。</p><p>说明：</p><p>① 数据类型可以是 C# 中任意的数据类型，数组名为一个合法的标识符；<code>[]</code>指名该标识符是一个数组类型变量。</p><p>② C# 语言中，数组的声明并不为数组元素分配内存，因此，<code>[]</code> 中不能给定数组中元素的个数。</p><p>③ 数组必须在访问前进行初始化。在定义完数组后，必须通过运算符 <code>new</code> 为它分配内存，才能对数组元素进行访问。</p><h4 id="2-3-通用类型-object"><a href="#2-3-通用类型-object" class="headerlink" title="2.3 通用类型 object"></a>2.3 通用类型 object</h4><p>**在 C# 中，object 是所有数据类型的基类型。它是一种通用类型，可以用来表示任何其他类型的值。**在 C# 中，所有的数据类型都直接或间接地继承自 object 类。因此，<font color="red"> <strong>obeject 是 .NET  框架中的基本类型。</strong> </font></p><p><font color="red"> 由于所有数据类型都可以隐式的转换为 object 类型，因此可以使用 object 类型来存储各种类型的数据。 </font></p><p><font color="red"> 在使用 object 类型时，常见的操作是将特定类型的数据 <strong>装箱</strong> 到 object 类型中，以及从 object 类型中 <strong>拆箱</strong> 为特定类型。 </font>装箱是将装箱是将值类型（如 int、float、struct等）转换为通用类型（object），而拆箱是将之前装箱的对象转换回原始的值类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">基本值类型的装箱与拆箱</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">ConsoleApplication2</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> num = <span class="hljs-number">42</span>;<br>            <span class="hljs-built_in">object</span> boxedNum = num; <span class="hljs-comment">// 装箱操作：将值类型int转换为object类型</span><br>            Console.WriteLine(<span class="hljs-string">&quot;boxedNum: &#123;0&#125;&quot;</span>, boxedNum);<br><br>            <span class="hljs-built_in">int</span> unboxedNum = (<span class="hljs-built_in">int</span>)boxedNum; <span class="hljs-comment">// 拆箱操作</span><br>            Console.WriteLine(<span class="hljs-string">&quot;unboxedNum: &#123;0&#125;&quot;</span>, unboxedNum);<br><br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">结构体的装箱与拆箱</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">ConsoleApplication2</span><br>&#123;<br>    <span class="hljs-comment">// 定义一个结构体Point</span><br>    <span class="hljs-keyword">struct</span> Point<br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> X;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Y;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            Point p = <span class="hljs-keyword">new</span> Point(); <br>            p.X = <span class="hljs-number">10</span>;<br>            p.Y = <span class="hljs-number">20</span>;<br><br>            <span class="hljs-built_in">object</span> boxedPoint = p; <span class="hljs-comment">// 装箱操作：值类型→引用类型</span><br>            Point unboxedPoint = (Point)boxedPoint; <span class="hljs-comment">// 拆箱操作：必须精确匹配类型</span><br><br>            Console.WriteLine(<span class="hljs-string">&quot;X: &#123;0&#125;, Y: &#123;1&#125;&quot;</span>, unboxedPoint.X, unboxedPoint.Y); <span class="hljs-comment">// 输出: X:10, Y:20</span><br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li><p>类型必须严格匹配</p></li><li><p>装箱会创建值得副本，修改原始值类型不会影响装箱后的对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-built_in">object</span> boxedA= a;<br>a=<span class="hljs-number">10</span>;<br>Console.WriteLine(<span class="hljs-built_in">int</span>)boxedA);<span class="hljs-comment">//输出:5（未被修改)</span><br></code></pre></td></tr></table></figure></li><li><p>由于<font color="red"> <strong>装箱和拆箱操作的性能开销比较大，可能会导致性能问题。</strong> </font></p></li></ol><h4 id="3-var类型"><a href="#3-var类型" class="headerlink" title="3.var类型"></a>3.var类型</h4><p>在 C# 中，var 关键字用于声明<strong>隐式类型</strong>的局部变量。它允许你在不显式指定数据类型的情况下声明变量。相反，数据类型是由编译器根据变量在<strong>初始化</strong>时赋的值来确定的。</p><h3 id="三、常量与变量"><a href="#三、常量与变量" class="headerlink" title="三、常量与变量"></a>三、常量与变量</h3><h4 id="1-常量"><a href="#1-常量" class="headerlink" title="1. 常量"></a>1. 常量</h4><p>（1）整型常量</p><p>​具体如下</p><pre><code class="hljs">1. 二进制：由数字 0 和 1 组成的数字序列。2. 八进制： 以数字 0 开头，且其后是由数字 0~7 整数组成的数字序列。3. 十进制4. 十六进制：以 0x 或者 0x 开头并且后跟 0~9， A~F 组成的数字序列。</code></pre><p>（2）浮点数常量</p><ol><li>单精度：通常用 F 或 f 结尾。</li><li>双精度：通常用 D 或 d 结尾。</li></ol><p>（3）字符常量    用单引号引起来。</p><p>（4）字符串常量</p><p>（5）布尔常量</p><p>（6）null常量</p><p>（7）符号常量</p><h4 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h4><p><font color="red"> <strong>变量具有四个属性：名字、类型、变量值和占用的内存地址。</strong> </font></p>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课内复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第六周第一节课的代码整理</title>
    <link href="/2025/03/24/%E7%AC%AC%E5%85%AD%E5%91%A8%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/"/>
    <url>/2025/03/24/%E7%AC%AC%E5%85%AD%E5%91%A8%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>注意，第五章讲完后会有一个期中测试，记得准备。</p><p>本节课花费了大量的时间讲解字符串的拘留池机制，注意复习。</p><p>下面是对于拘留池性质的测试与展示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">static</span> System.Runtime.InteropServices.JavaScript.JSType;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">string</span>的拘留池测试<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>        &#123;<br>            <span class="hljs-built_in">string</span> str1 = <span class="hljs-string">&quot;I am very happy!!&quot;</span>;<br>            <span class="hljs-built_in">string</span> str2 = <span class="hljs-string">&quot;I am very happy!!&quot;</span>;<br>            Console.WriteLine(<span class="hljs-built_in">object</span>.ReferenceEquals(str1, str2)); <span class="hljs-comment">//str1 与 str2 的引用相同,</span><br>                                                                   <span class="hljs-comment">//返回结果为True</span><br><br>            <span class="hljs-built_in">char</span>[] array1 = &#123; <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span> &#125;;<br>            <span class="hljs-built_in">string</span> str4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(array1);<br>            Console.WriteLine(<span class="hljs-built_in">object</span>.ReferenceEquals(str1, str4));  <span class="hljs-comment">//str1 与 str4 引用不同的话，</span><br>                                                                    <span class="hljs-comment">//就说明使用 new 时拘留池机制没有发挥作用</span><br>                                                                    <span class="hljs-comment">//False</span><br>                                                                    <span class="hljs-comment">//str2 存在容器中，所以返回的是一个对象的引用</span><br>                                                                    <span class="hljs-comment">//IsInterned(str2) = I am very happy!!</span><br>            Console.WriteLine(<span class="hljs-string">&quot;IsInterned(str2) = &quot;</span> + <span class="hljs-built_in">string</span>.IsInterned(str2));<br><br>            <span class="hljs-built_in">char</span>[] array2 = &#123; <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span> &#125;;<br>            <span class="hljs-built_in">string</span> str5 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(array2);   <span class="hljs-comment">//因为 str5 使用 new 分配的，</span><br>                                                <span class="hljs-comment">//所以 str5 不存在与内部容器中，</span><br>                                                <span class="hljs-comment">//所以如果IsInterned(str5)返回 null,</span><br>                                                <span class="hljs-comment">//则说明该方法不会将其添加到拘留池中</span><br>            <span class="hljs-built_in">string</span> str6 = <span class="hljs-built_in">string</span>.IsInterned(str5);   <span class="hljs-comment">//返回值为null,说明在字符串拘留池中找不到字符串str5</span><br>            Console.WriteLine(str6 == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;null&quot;</span> : <span class="hljs-string">&quot;not null&quot;</span>);   <span class="hljs-comment">// 输出为null</span><br><br>            <span class="hljs-built_in">string</span>.Intern(str5);   <span class="hljs-comment">//Intern方法将字符串str5添加到字符串拘留池中</span><br>            <span class="hljs-built_in">string</span> str7 = <span class="hljs-built_in">string</span>.IsInterned(str5); <span class="hljs-comment">//再用 IsInterned()验证下</span><br>                                                   <span class="hljs-comment">//intern()方法是否将其添加进了容器</span><br>                                                   <span class="hljs-comment">//此时str7的值为test</span><br>            Console.Write(<span class="hljs-string">$&quot;IsInterned(str5) = <span class="hljs-subst">&#123;<span class="hljs-built_in">string</span>.IsInterned(str5)&#125;</span>\n&quot;</span>);  <span class="hljs-comment">//test</span><br>            Console.WriteLine(str7 == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;null&quot;</span> : <span class="hljs-string">&quot;not null&quot;</span>);  <span class="hljs-comment">//not null</span><br><br>            Console.ReadKey();<br><br><br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#第五周第二节课的代码整理</title>
    <link href="/2025/03/19/C-%E7%AC%AC%E4%BA%94%E5%91%A8%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/"/>
    <url>/2025/03/19/C-%E7%AC%AC%E4%BA%94%E5%91%A8%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    这个代码用于检测在函数中对字符串数组修改的效果</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">namespace</span> 字符串测试1<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fun</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] Arr</span>)</span><br>        &#123;<br>            Arr[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Super Big&quot;</span>;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">string</span>[] names = &#123; <span class="hljs-string">&quot;Big&quot;</span>, <span class="hljs-string">&quot;Head&quot;</span>, <span class="hljs-string">&quot;Fish&quot;</span> &#125;;<br>            Fun(names);<br>            Console.WriteLine(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;names[<span class="hljs-number">0</span>]&#125;</span> <span class="hljs-subst">&#123;names[<span class="hljs-number">1</span>]&#125;</span> <span class="hljs-subst">&#123;names[<span class="hljs-number">2</span>]&#125;</span>&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    最后输出的是 Super Big Head Fish</span><br><span class="hljs-comment">                Hello, World!</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>课堂上老师还布置了一个任务，讲就是让我们用一个循环，按要求输出字符串数组。我们知道，数组中的数据存储方式是连续存储的。所以只要我们得到字符串的起始地址，我们从这里开始遍历，遍历的次数就是数组的行数乘列数。当我们遍历完一行就可以输出换行进行分割。这样就用一个循环完成了要求。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> 按要求输出<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; <br>            <span class="hljs-built_in">string</span>[,] myArr = &#123; &#123; <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span> &#125;, &#123; <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;F&quot;</span> &#125;, &#123; <span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;I&quot;</span> &#125; &#125;;<br>            <span class="hljs-keyword">fixed</span> (<span class="hljs-built_in">string</span>* p = myArr)<br>            &#123;<br>                <span class="hljs-built_in">string</span> *temp = p;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; myArr.GetLength(<span class="hljs-number">0</span>) * myArr.GetLength(<span class="hljs-number">1</span>); i++)<br>                &#123;<br>                    Console.Write(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;*temp&#125;</span> &quot;</span>);<br>                    temp++;<br>                    <span class="hljs-keyword">if</span> ((i + <span class="hljs-number">1</span>) % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        Console.WriteLine();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个任务主要考察对字符串分割的函数的运用。StringObj.Split(SplitCh) Splitch 为分割的字符，这个函数可以按 Splitch 进行分割。而这个函数反馈的是一个数组，所以我们需要定义一个数组去存储函数返回的数据。最后我们对这个数组进行遍历，就能完成任务。 </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> 字符串的分割<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">string</span> s1 = <span class="hljs-string">&quot;Central-South-University&quot;</span>;<br>            <span class="hljs-built_in">string</span>[] s2 = s1.Split(<span class="hljs-string">&#x27;-&#x27;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; s2.Length; i++)<br>            &#123;<br>                Console.WriteLine(s2[i]);<br>            &#125;<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>这里我也把上次布置的作业解答进行分享。上次布置的代码要求我们输出 4 位水仙花数，我觉得求水仙花数的思路大致一致，所以写了一个求 n 位水仙花数的代码。考虑到在输入阶段可能会出现一些错误，我在代码中加入了一些判断和递归来规避错误。希望我的代码能提供一些帮助。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> _4位水仙花数<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Cal</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> num, <span class="hljs-built_in">int</span> power</span>)      <span class="hljs-comment">//用于幂运算并返回值</span></span><br>        &#123;<br>            <span class="hljs-built_in">int</span> ans = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">int</span> temp;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; power; i++)<br>            &#123;<br>                temp = num % <span class="hljs-number">10</span>;<br>                ans += (<span class="hljs-built_in">int</span>)Math.Pow(temp, power);<br>                num /= <span class="hljs-number">10</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Find_Num_Proc</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> start, <span class="hljs-built_in">int</span> end, <span class="hljs-built_in">int</span> power</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> ans = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (start &gt;= end)<br>            &#123;<br>                Console.WriteLine(<span class="hljs-string">&quot;输入的数据范围有误，请重新输入&quot;</span>);<br>                Console.Write(<span class="hljs-string">&quot;输入起始值：&quot;</span>);<br>                start = Convert.ToInt32(Console.ReadLine());<br>                Console.Write(<span class="hljs-string">&quot;输入结束值：&quot;</span>);<br>                end = Convert.ToInt32(Console.ReadLine());<br>                Console.Write(<span class="hljs-string">&quot;输入计算的水仙花数位数：&quot;</span>);<br>                power = Convert.ToInt32(Console.ReadLine());<br>                Find_Num_Proc(start, end, power);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">int</span>)Math.Pow(<span class="hljs-number">10</span>, power - <span class="hljs-number">1</span>) &gt; start)<br>            &#123;<br>                Console.WriteLine(<span class="hljs-string">$&quot;由于您想要求得是位数为<span class="hljs-subst">&#123;power&#125;</span>的水仙花数\n而您输入的数字范围的最小值要超过它的限制，所以这里我们为您实际求得范围为<span class="hljs-subst">&#123;(<span class="hljs-built_in">int</span>)Math.Pow(<span class="hljs-number">10</span>, power - <span class="hljs-number">1</span>)&#125;</span>到<span class="hljs-subst">&#123;end&#125;</span>&quot;</span>);<br>                start = (<span class="hljs-built_in">int</span>)Math.Pow(<span class="hljs-number">10</span>, power - <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">int</span>)Math.Pow(<span class="hljs-number">10</span>, power) - <span class="hljs-number">1</span>&lt; end)<br>            &#123;<br>                Console.WriteLine(<span class="hljs-string">$&quot;由于您想要求得是位数为<span class="hljs-subst">&#123;power&#125;</span>的水仙花数\n而您输入的数字范围的最大值要超过它的限制，所以这里我们为您实际求得范围为<span class="hljs-subst">&#123;start&#125;</span>到<span class="hljs-subst">&#123;(<span class="hljs-built_in">int</span>)Math.Pow(<span class="hljs-number">10</span>,power) - <span class="hljs-number">1</span>&#125;</span>&quot;</span>);<br>                end = (<span class="hljs-built_in">int</span>)Math.Pow(<span class="hljs-number">10</span>, power) - <span class="hljs-number">1</span>;<br>            &#125;<br>            Console.WriteLine(<span class="hljs-string">&quot;------------------------------------------------&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = start; i &lt;= end; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (Cal(i, power) == i)<br>                &#123;<br>                    Console.WriteLine(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>);<br>                    ans++; <br>                &#125;<br>            &#125;<br>            Console.WriteLine(<span class="hljs-string">$&quot;在范围内共找到了<span class="hljs-subst">&#123;ans&#125;</span>个水仙花数&quot;</span>);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> start, end, power;<br>            Console.WriteLine(<span class="hljs-string">&quot;这是一个计算多位水仙花数的小工具 :)&quot;</span>);<br>            Console.Write(<span class="hljs-string">&quot;输入起始值：&quot;</span>);<br>            start = Convert.ToInt32(Console.ReadLine());<br>            Console.Write(<span class="hljs-string">&quot;输入结束值：&quot;</span>);<br>            end = Convert.ToInt32(Console.ReadLine());<br>            Console.Write(<span class="hljs-string">&quot;输入计算的水仙花数位数：&quot;</span>);<br>            power = Convert.ToInt32(Console.ReadLine());<br>            Find_Num_Proc(start, end, power);<br><br>            <span class="hljs-comment">//Console.WriteLine(&quot;Hello, World!&quot;);</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#第五周第一节课的代码整理</title>
    <link href="/2025/03/17/C-%E7%AC%AC%E4%BA%94%E5%91%A8%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/"/>
    <url>/2025/03/17/C-%E7%AC%AC%E4%BA%94%E5%91%A8%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE%E7%9A%84%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>这节课课前首先提问了： $break$ 语句和 $continue$ 语句的区别分别是什么。</p><p>$break$ 语句是跳出整个循环，而且是最近的循环。$continue$ 是结束当前的循环。</p><p>下面的这份代码在解释outer参数时出现。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">outer</span>参数<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">TryFindMinMax</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] numbers, <span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> min, <span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> max</span>)</span><br>        &#123;<br>            min = max = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(numbers == <span class="hljs-literal">null</span> || numbers.Length == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            min = numbers[<span class="hljs-number">0</span>]; <br>            max = numbers[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">int</span> num <span class="hljs-keyword">in</span> numbers)<br>            &#123; <br>                <span class="hljs-keyword">if</span>(num &lt; min) min = num;<br>                <span class="hljs-keyword">if</span> (num &gt; max) max = num;<br>            &#125;<br>            <span class="hljs-comment">// 此处如果对numbers进行修改，那么主函数中的 data 也会发生变化</span><br>            <span class="hljs-comment">// 因为数组是引用类型，传递的是地址</span><br>            <span class="hljs-comment">// 上课点到我回答这个问题，答错了www</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span>[] data = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>&#125;;<br>            <span class="hljs-keyword">if</span> (TryFindMinMax(data, <span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> minVal, <span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> maxVal))<br>            &#123;<br>                Console.WriteLine(<span class="hljs-string">$&quot;最小值：<span class="hljs-subst">&#123;minVal&#125;</span>， 最大值<span class="hljs-subst">&#123;maxVal&#125;</span>&quot;</span>);<br>            &#125;<br><br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>这里是对params参数的调用测试，params参数传递的是可变参数数组，允许方法接收可变数量的参数，这样调用方法时可以传入任意数量的同类型参数，而不需要显式地创建数组。 </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">params</span>参数应用<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Sum</span>(<span class="hljs-params"><span class="hljs-keyword">params</span> <span class="hljs-built_in">int</span>[] numbers</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> total = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">int</span> num <span class="hljs-keyword">in</span> numbers)<br>            &#123;<br>                total += num;<br>            &#125;<br>            <span class="hljs-keyword">return</span> total;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            Console.WriteLine(Sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>            Console.WriteLine(Sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>));<br>            Console.WriteLine(Sum());<br><br>            <span class="hljs-comment">//也可以直接传递数组</span><br>            <span class="hljs-built_in">int</span>[] arr = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span> &#125;;<br>            Console.WriteLine(Sum(arr));<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>下面是课堂上布置的一个练习，用来测试递归函数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> 递归测试<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Fun</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * Fun(n - <span class="hljs-number">1</span>) + Fun(n - <span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> x = <span class="hljs-number">8</span>;<br>            Console.WriteLine(<span class="hljs-string">$&quot;函数得到的值为<span class="hljs-subst">&#123;Fun(x)&#125;</span>&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>老师布置了一个任务，就是写一个适用于四位数水仙花数的程序，放在word中，后面提交到他的电脑上。</p>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#阶段性复习——第一章</title>
    <link href="/2025/03/17/C-%E9%98%B6%E6%AE%B5%E6%80%A7%E5%A4%8D%E4%B9%A0%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2025/03/17/C-%E9%98%B6%E6%AE%B5%E6%80%A7%E5%A4%8D%E4%B9%A0%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>我会将自己复习 C# 的笔记都同步更新到博客上，不过我无法保证这些文章对于最后的考试会有帮助。这里整理的知识点主要有两大来源：课本内容与课堂习题。我自己也会在课上跟着老师绘制树形图，不过绘制树形图的频率没有规律，而且往往绘制出来的内容也会比较乱，这个我就不上传了，我会根据树形图上的重点——也就是老师上课时讲过的重点，去整理这些笔记。未来如果有机会的话，我也会将课堂上我们写过的代码给整理上去。眼下是第五周，前几周的代码我可能上传不了<del>因为之前命名的太乱了</del>，不过前几周的代码也不算重要。未来我大概每节课之后都会更新一次代码。希望能说到做到。</p><p>下面就是对第一章知识点的整理。<del>说实话感觉课后习题与课堂上讲的内容关联性不大</del></p><h2 id="一-类"><a href="#一-类" class="headerlink" title="一. 类"></a>一. 类</h2><h3 id="1-对象抽象与归类"><a href="#1-对象抽象与归类" class="headerlink" title="1. 对象抽象与归类"></a>1. 对象抽象与归类</h3><p>类是从具有<strong>相同行为与属性的对象</strong>中抽象出来的。类是一堆具有共性对象的特性描述，也就是对某种对象的抽象描述。对象具有<strong>类同样的属性成员与方法成员</strong>，用一个类定义的一堆对象中，不同对象具有<strong>不同的</strong>属性值。</p><p>计算机系统对<strong>对象的抽象化</strong>，主要分为两种：</p><ol><li><strong>数据的抽象化</strong>，将事物的数据抽象为计算机系统中的变量；</li><li><strong>活动过程的抽象化</strong>，将现实生活中的事务的活动过程转化为程序中的执行流程</li></ol><p>对象有<strong>属性</strong>和<strong>功能</strong>，属性就是<font color="red"> <strong>对象的数据</strong> </font>，功能描述<font color="red"> <strong>对象的活动</strong> </font>。一般习惯性的把属性叫做对象的<font color="red"> <strong>数据成员</strong> </font>，而把功能叫做对象的<font color="red"> <strong>方法成员</strong> </font>。</p><h3 id="2-类的封装"><a href="#2-类的封装" class="headerlink" title="2. 类的封装"></a>2. 类的封装</h3><p><strong>封装</strong>，就是将数据和对数据的处理方法结合在一起，对外只提供操作接口。隐藏方法的具体实现过程，同时对某些属性也进行隐藏。</p><h3 id="3-权限的模拟"><a href="#3-权限的模拟" class="headerlink" title="3. 权限的模拟"></a>3. 权限的模拟</h3><p>类的权限设置包括<font color="red"> <strong>类名的权限设置</strong> </font>和<font color="red"> <strong>成员的权限设置</strong> </font>两个方面。</p><p><strong>访问权限：</strong>   <em><strong>public, internal, protected, private internal, seaed</strong></em>  </p><h2 id="二-NET与C-编程语言"><a href="#二-NET与C-编程语言" class="headerlink" title="二. NET与C#编程语言"></a>二. NET与C#编程语言</h2><h3 id="1-Net-Framework体系结构"><a href="#1-Net-Framework体系结构" class="headerlink" title="1. Net Framework体系结构"></a>1. Net Framework体系结构</h3><p><font color="red"> <strong>.Net Framework位于操作系统与应用程序之间</strong> </font>负责管理在.NET Framework上运行的各种应用程序，且**.NET应用程序不依赖于操作系统**</p><h2 id="三-计算机语言中的标识符和关键字"><a href="#三-计算机语言中的标识符和关键字" class="headerlink" title="三.计算机语言中的标识符和关键字"></a>三.计算机语言中的标识符和关键字</h2><p>类的成员包括<strong>数据成员</strong>与<strong>方法成员</strong>。除此之外，类体一般还有一个<strong>属性成员</strong>。</p><p>类的封装定义中包括三个部分：<strong>字段、属性、方法</strong>，其中字段表示类中定义的<strong>成员变量</strong>，利用访问修饰符定义外界对字段的权限访问。方法就是类的行为，用<strong>函数</strong>的形式表达。</p>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课内复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通关大表哥2第二章后的一些随感</title>
    <link href="/2025/03/15/%E9%80%9A%E5%85%B3%E5%A4%A7%E8%A1%A8%E5%93%A52%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9A%8F%E6%84%9F/"/>
    <url>/2025/03/15/%E9%80%9A%E5%85%B3%E5%A4%A7%E8%A1%A8%E5%93%A52%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9A%8F%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>用了两周时间，大概十六个小时，通关了大表哥2的第二章。随着剧情的深入，我越发喜欢起我们的主角亚瑟和他的兄弟们。这个游戏带给我前所未有的震撼，虽然它的剧情节奏偏缓，角色在游戏里的远行也主要依靠骑行，但这丝毫不影响游戏的体验。一群亡命徒，杀人抢劫拦火车，嘴里却时常念叨追寻自由。在营地中有时会发生争吵，到了晚上，你又常常可以坐在火堆前，听其他兄弟的故事。亡命徒的生活并不都是充满血腥和硝烟，他们当中的许多人也拥有着很正的三观。他们每个人也都有着自己的故事。他们的故事与剧情可能没有太大关联，在未来我也可能无法了解他们所有的过往，但这已经够了。我在游戏时往往忘记了这是一款游戏，我真的愿意在火堆前，听一个npc讲述十几分钟的故事，没有剧情要求，我也可以随时离开，但我就是有些不舍，我很珍惜这些故事。这些故事为这款游戏带来了超乎寻常的深度，也让游戏里的角色拥有更为立体的灵魂。</p><p>亚瑟，我们的主角。在开始游戏时我们对他一无所知，随着剧情慢慢深入，我们开始了解了一些他的过往，了解他与其他人的交集。而我们也渐渐了解了营地里的其他人。而这些过去的故事都是都是亚瑟与伙伴们在前行的途中，聊天提到的，与剧情往往没有太多的直接的关系。我非常的喜欢这一点。</p>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大表哥2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯客观题复习概览</title>
    <link href="/2025/03/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%AE%A2%E8%A7%82%E9%A2%98%E5%A4%8D%E4%B9%A0%E6%A6%82%E8%A7%88/"/>
    <url>/2025/03/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%AE%A2%E8%A7%82%E9%A2%98%E5%A4%8D%E4%B9%A0%E6%A6%82%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<p>再过一个月就要进行蓝桥杯比赛，后面得加强对客观题和程序题的着重复习。这篇博客主要是为了对客观题涉及到的知识点做一个整理，后面会对这些知识点进行着重复习，同时也可能会上传笔记。</p><h3 id="第十二届："><a href="#第十二届：" class="headerlink" title="第十二届："></a><p class="note note-primary">第十二届：</p></h3><ol><li>串口通信     <span style="margin-left: 2em"></span>（通信速度单位）</li><li>放大电路  <span style="margin-left: 2em"></span>   （开环概念， 电压放大倍数与电压增益关系， 多级放大电路通频带变化） </li><li>时序逻辑电路 </li><li>循环结构语法</li><li>c 的关键字</li><li>指针       <span style="margin-left: 2em"></span><span style="margin-left: 2em"></span> （语法）</li><li>通信方式    <span style="margin-left: 2em"></span><span style="margin-left: 0.6em"></span> (I2C地址模式， 哪种板间通信必须共地)</li></ol><h3 id="第十三届："><a href="#第十三届：" class="headerlink" title="第十三届："></a><p class="note note-success">第十三届：</p></h3><ol><li>时钟 <span style="margin-left: 2em"></span> （作为MCO输出的时钟源）</li><li>数电 <span style="margin-left: 2em"></span>（三态门）</li><li>电路 <span style="margin-left: 2em"></span>（电路图与表达式相符的是）</li><li>寄存器 <span style="margin-left: 1em"></span>（实现引脚翻转）</li><li>通信 <span style="margin-left: 2em"></span> （差分方式传输的选项，全双工串行通信性质）</li><li>模电 <span style="margin-left: 2em"></span>（放大电路）</li><li>stm32（内核级外设， DMA可连接的外设）</li></ol><h3 id="第十四届："><a href="#第十四届：" class="headerlink" title="第十四届："></a><p class="note note-info">第十四届：</p></h3><ol><li>数电 <span style="margin-left: 2em"></span>（时序逻辑电路， 二进制计算， 门电路， 同步电路与异步电路的区别， DAC转换）</li><li>模电 <span style="margin-left: 2em"></span>（运算放大器， 晶体管性质）</li><li>stm32<span style="margin-left: 2em"></span>（中断优先级的配置） </li><li>c 的关键字（inline）</li></ol><p>以上是对前几届蓝桥杯嵌入式客观题涉及知识点的整理，可以发现，客观题考察的重点是模电的放大电路和数电的部分内容。同时每年都会出一些与stm32相关的题，得对stm32的各个组成部分都进行整理总结。后面得带着对模电和数电进行大致的学习。一个月的话，时间足够，不过也得抓紧了。加油！</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>适用于Cramer定理的python代码</title>
    <link href="/2025/03/13/%E9%80%82%E7%94%A8%E4%BA%8ECramer%E5%AE%9A%E7%90%86%E7%9A%84python%E4%BB%A3%E7%A0%81/"/>
    <url>/2025/03/13/%E9%80%82%E7%94%A8%E4%BA%8ECramer%E5%AE%9A%E7%90%86%E7%9A%84python%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>最近做线性代数练习，遇到一节练习，要求我们全部用cramer定理去解线性方程。这显然是很离谱的，因为cramer定理虽然正确，但计算量巨大。而练习涉及到的矩阵，大部分都是三阶和四阶矩阵，有一题甚至涉及6阶矩阵，简直丧心病狂。所以我用deepseek生成了一篇代码。这篇代码写的很好，思路清晰，结构规整而且有许多对numpy的调用值得学习，所以我准备把这篇代码整理下来，写篇文章放到博客上。</p><p>下面就是deepseek生成的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_matrix</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;读取n阶方阵和常数项&quot;&quot;&quot;</span><br>    matrix = []<br>    b = []<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请输入<span class="hljs-subst">&#123;n&#125;</span>行，每行包含<span class="hljs-subst">&#123;n + <span class="hljs-number">1</span>&#125;</span>个数值（系数 + 常数项）：&quot;</span>)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            row = <span class="hljs-built_in">input</span>().split()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) == n + <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-comment"># 将输入转换为浮点数</span><br>                    coefficients = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">float</span>, row[:n]))<br>                    constant = <span class="hljs-built_in">float</span>(row[-<span class="hljs-number">1</span>])<br>                    matrix.append(coefficients)<br>                    b.append(constant)<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">except</span> ValueError:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入包含非数字，请重新输入该行：&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;每行需要输入<span class="hljs-subst">&#123;n + <span class="hljs-number">1</span>&#125;</span>个数值，请重新输入该行：&quot;</span>)<br>    <span class="hljs-keyword">return</span> np.array(matrix), np.array(b)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cramer_solve</span>(<span class="hljs-params">A, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;使用Cramer法则解线性方程组&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        D = np.linalg.det(A)<br>    <span class="hljs-keyword">except</span> np.linalg.LinAlgError:<br>        D = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(D) &lt; <span class="hljs-number">1e-9</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>    D_values = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(A.shape[<span class="hljs-number">1</span>]):<br>        Ai = A.copy()<br>        Ai[:, i] = b<br>        D_values.append(np.linalg.det(Ai))<br><br>    solutions = [D_i / D <span class="hljs-keyword">for</span> D_i <span class="hljs-keyword">in</span> D_values]<br>    <span class="hljs-keyword">return</span> D, D_values, solutions<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入方阵的阶数n：&quot;</span>))<br>    A, b = read_matrix(n)<br><br>    D, D_values, solutions = cramer_solve(A, b)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n计算过程：&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;系数矩阵的行列式 D = <span class="hljs-subst">&#123;D:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">for</span> i, D_i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(D_values, <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;替换第<span class="hljs-subst">&#123;i&#125;</span>列后的行列式 D<span class="hljs-subst">&#123;i&#125;</span> = <span class="hljs-subst">&#123;D_i:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> solutions <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n行列式D为0，方程组无唯一解！&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n方程组的解：&quot;</span>)<br>        <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(solutions, <span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;x<span class="hljs-subst">&#123;i&#125;</span> = <span class="hljs-subst">&#123;x:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>首先值得我学习的就是这个结构的设置，定义多个函数，最后再main函数里将他们组合。这样做就很容易看出代码的逻辑，同时也方便在代码发生错误时，对错误进行定位和修正。同时代码中用了多处 try:   except   语句，对代码可能出现的问题进行一定的预测，规避代码出现故障。这一点对python还是蛮重要的，因为python的一些库中的函数，在遇到问题时就会返回错误值，程序就有可能直接在出现问题的地方崩溃。实际上一些会导致函数返回错误值的问题，比如输入错误，本身问题不大。在这个时候运用try–except语句就可以显著提升代码的流畅性。</p><p>其次就是利用numpy库对矩阵的处理。要善用冒号之类的符号，可以显著提高效率，同时在涉及到对数列或者矩阵进行函数操作时，要能想到用 map 进行处理。比如代码对输入进行处理的部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):                     <span class="hljs-comment">#循环n次</span><br>     <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>         row = <span class="hljs-built_in">input</span>().split()         <span class="hljs-comment">#利用split对输入的字符进行拆分，得到分隔开的元素</span><br>         <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) == n + <span class="hljs-number">1</span>:         <span class="hljs-comment">#此处可以防止漏输等情况发生</span><br>             <span class="hljs-keyword">try</span>:<br>                 <span class="hljs-comment"># 将输入转换为浮点数</span><br>                 coefficients = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">float</span>, row[:n]))  <br>                 constant = <span class="hljs-built_in">float</span>(row[-<span class="hljs-number">1</span>])<br>                 matrix.append(coefficients)     <span class="hljs-comment">#在a矩阵中添加系数</span><br>                 b.append(constant)              <span class="hljs-comment">#在b矩阵中添加常量</span><br>                 <span class="hljs-keyword">break</span><br>             <span class="hljs-keyword">except</span> ValueError:<br>                 <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入包含非数字，请重新输入该行：&quot;</span>)<br>         <span class="hljs-keyword">else</span>:<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;每行需要输入<span class="hljs-subst">&#123;n + <span class="hljs-number">1</span>&#125;</span>个数值，请重新输入该行：&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>注意最后函数的返回，用到了 array 函数，这个函数可以创建一个数组，而我们需要返回的也是一整个数组。所以用 array 非常合适。经测试，假如这里不用array，虽然编译时不会报错，但是使用时会出现问题，程序会直接崩溃。我自己写似乎很难会想到这一点。。。</p><p>而后面主要学习的就是对矩阵列变换的处理。这里用了一个 shape 函数，用来获取矩阵的列数。根据 cramer 定理，我们需要把 b 带入到 A 中的每一列去求行列式。在 python 里，只要满足行数相同，我们就可以直接进行赋值。这里为了不干涉原矩阵 A ，所以用到了 copy 语句进行复制，再对复制出的 Ai 进行处理。随后再把得到的结果放进储存结果的数组中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cramer_solve</span>(<span class="hljs-params">A, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;使用Cramer法则解线性方程组&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        D = np.linalg.det(A)<br>    <span class="hljs-keyword">except</span> np.linalg.LinAlgError:<br>        D = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(D) &lt; <span class="hljs-number">1e-9</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>    D_values = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(A.shape[<span class="hljs-number">1</span>]):<br>        Ai = A.copy()<br>        Ai[:, i] = b<br>        D_values.append(np.linalg.det(Ai))<br><br>    solutions = [D_i / D <span class="hljs-keyword">for</span> D_i <span class="hljs-keyword">in</span> D_values]<br>    <span class="hljs-keyword">return</span> D, D_values, solutions<br><br></code></pre></td></tr></table></figure><p>在 main 函数部分有个小技巧，就是enumerate函数的运用。这个函数可以同时列出数据和下标，省事了不少。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入方阵的阶数n：&quot;</span>))<br>    A, b = read_matrix(n)<br><br>    D, D_values, solutions = cramer_solve(A, b)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n计算过程：&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;系数矩阵的行列式 D = <span class="hljs-subst">&#123;D:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">for</span> i, D_i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(D_values, <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;替换第<span class="hljs-subst">&#123;i&#125;</span>列后的行列式 D<span class="hljs-subst">&#123;i&#125;</span> = <span class="hljs-subst">&#123;D_i:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> solutions <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n行列式D为0，方程组无唯一解！&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n方程组的解：&quot;</span>)<br>        <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(solutions, <span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;x<span class="hljs-subst">&#123;i&#125;</span> = <span class="hljs-subst">&#123;x:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>以上就是对这份代码的整理与学习，目前我还没试着自己重写一遍，未来在涉及到其他矩阵问题时可以借鉴一下这份代码<del>当然也可以再问小鲸鱼</del>。希望自己能获得更高层次的提升吧。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/03/13/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/03/13/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章，用来测试图片。如果测试成功，你应该可以看到一只小猫~</p><p><img src="/2025/03/13/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/image1.jpg" alt="超可爱的小猫"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/13/hello-world/"/>
    <url>/2025/03/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
